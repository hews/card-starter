
// ************************
// * COLOR DEFINITIONS
// ************************

$goldenrod: #daa520;
$off-white: #f4f4f4;
$obscured:  #c3c3c3;
$white:     #fff;
$black:     #292929;

// ************************
// * CARD IMAGES MIXINS
// ************************


@function short-suit($suit) {
  @return str-slice($suit, 1, 1);
}

@function suit-symbol($suit) {
  @if (short-suit($suit) == "d") {
    @return "♦";
  } @elseif (short-suit($suit) == "s") {
    @return "♠";
  } @elseif (short-suit($suit) == "c") {
    @return "♣";
  } @else {
    @return "♥";
  }
}

@function short-rank($rank) {
  @if (inspect($rank) == $rank) {
    @return str-slice(to-upper-case($rank), 1, 1);
  } @else {
    @if ($rank < 10) {
      @return "0" + inspect($rank);
    } @else {
      @return inspect($rank);
    }
  }
}

@function selector-rank($rank) {
  $rank: short-rank($rank);
  @if ((str-index($rank, "0") == 1) or (str-index($rank, "1") == 1)) {
    @return "r" + $rank;
  } @else {
    @return $rank;
  }
}

@mixin card-front($rank, $suit) {
  .card.#{$suit}.#{selector-rank($rank)},
  .card.#{short-suit($suit)}#{short-rank($rank)},
  .card.#{suit-symbol($suit)}#{short-rank($rank)} {
    background-image: url("../images/#{$suit}/#{$suit}-#{selector-rank($rank)}.svg");
  }
}

@function back-type($color) {
  @if ($color == "") {
    @return "back";
  } @else {
    @return "back-" + $color;
  }
}

@mixin card-back($color) {
  @if ($color == "") {
    .card.#{back-type($color)} {
      background-image: url("../images/backs/blue.svg");
    }
  } @else {
    .card.#{back-type($color)} {
      background-image: url("../images/backs/#{$color}.svg");
    }
  }
}

@function joker-type($color) {
  @if ($color == "") {
    @return "joker";
  } @else {
    @return "joker-" + $color;
  }
}

@mixin card-joker($color) {
  .card.#{joker-type($color)} {
    background-image: url("../images/jokers/#{joker-type($color)}.svg");
  }
}

// ************************
// * DROP SHADOW MIXIN
// ************************

@mixin drop-shadow($offset-x, $offset-y) {
  box-shadow:         $offset-x $offset-y 3px 0 rgba($black, 0.75);
}

// ************************
// * BASE "CARD" RULE
// ************************

.card {
  box-sizing: border-box;

  display: inline-block;
  margin:  0.125em;
  cursor:  pointer;

  /* Set the card's dimensions, and size it relative to
     it's font size. */

  font-size: inherit;
  width:     4.0em;
  height:    5.5em;

  /* Add a default background color and border. */

  background-color: $white;
  border-radius:    0.20em;
  border:           1px solid $obscured;

  /* Scale and set the background settings. */

  // background-image:    url("../images/backs/blue.svg");
  background-repeat:   no-repeat;
  background-position: center center;
  background-size:     contain;

  /* "Hide" any text within the element (use text to be
     simply compliant with screen readers, etc.). */

  text-indent: 100%;
  white-space: nowrap;
  overflow:    hidden;

  /* Default sizes for cards (size based off the font). */

  &.small {
    font-size: 12px;
  }

  &.large {
    font-size: 26px;
  }

  &.xlarge {
    font-size: 42px;
  }

  /* Optional styles for cards: borderless and drop shadow. */

  &.no-border {
    border: 0;
  }

  &.shadow {
    @include drop-shadow(2px, 2px)
  }

  /* Not a card, but a card-shaped outline to represent a
     droppable place, like an empty pile. */

  &.outline {
    background-image: none;
    background-color: rgba($obscured, 0.50);

    border: 0.15em dashed $goldenrod;
  }
}

@include card-front("ace",   "diamonds");
@include card-front("king",  "diamonds");
@include card-front("queen", "diamonds");
@include card-front("jack",  "diamonds");
@include card-front(10, "diamonds");
@include card-front(9,  "diamonds");
@include card-front(8,  "diamonds");
@include card-front(7,  "diamonds");
@include card-front(6,  "diamonds");
@include card-front(5,  "diamonds");
@include card-front(4,  "diamonds");
@include card-front(3,  "diamonds");
@include card-front(2,  "diamonds");
@include card-front("ace",   "hearts");
@include card-front("king",  "hearts");
@include card-front("queen", "hearts");
@include card-front("jack",  "hearts");
@include card-front(10, "hearts");
@include card-front(9,  "hearts");
@include card-front(8,  "hearts");
@include card-front(7,  "hearts");
@include card-front(6,  "hearts");
@include card-front(5,  "hearts");
@include card-front(4,  "hearts");
@include card-front(3,  "hearts");
@include card-front(2,  "hearts");
@include card-front("ace",   "spades");
@include card-front("king",  "spades");
@include card-front("queen", "spades");
@include card-front("jack",  "spades");
@include card-front(10, "spades");
@include card-front(9,  "spades");
@include card-front(8,  "spades");
@include card-front(7,  "spades");
@include card-front(6,  "spades");
@include card-front(5,  "spades");
@include card-front(4,  "spades");
@include card-front(3,  "spades");
@include card-front(2,  "spades");
@include card-front("ace",   "clubs");
@include card-front("king",  "clubs");
@include card-front("queen", "clubs");
@include card-front("jack",  "clubs");
@include card-front(10, "clubs");
@include card-front(9,  "clubs");
@include card-front(8,  "clubs");
@include card-front(7,  "clubs");
@include card-front(6,  "clubs");
@include card-front(5,  "clubs");
@include card-front(4,  "clubs");
@include card-front(3,  "clubs");
@include card-front(2,  "clubs");

@include card-joker("");
@include card-joker("black");
@include card-joker("red");

@include card-back("");
@include card-back("blue");
@include card-back("red");

/* Re-orients the cards for different directions. While
   they are symmetric, it's still important to orient
   them correctly in case text or other symbols are
   layered on them with CSS pseudo-selectors, new
   classes/rules, etc. */

.card.west,
.card.W {
  transform: rotate(90deg);
  margin: auto 0.75em;

  &.shadow {
    @include drop-shadow(2px, -2px);
  }

}

.card.north,
.card.N {
  transform: rotate(180deg);

  &.shadow {
    @include drop-shadow(-2px, -2px);
  }
}

.card.east,
.card.E {
  transform: rotate(270deg);
  margin: auto 0.75em;

  &.shadow {
    @include drop-shadow(-2px, 2px);
  }
}

// scss-lint:disable EmptyRule
.card.south,
.card.S {}
// scss-lint:enable EmptyRule
